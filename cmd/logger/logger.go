/*
 * Minio Cloud Storage, (C) 2015, 2016, 2017, 2018 Minio, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package logger

import (
	"context"
	"fmt"
	"go/build"
	"path/filepath"
	"runtime"
	"strings"
	c "github.com/minio/mc/pkg/console"
	"github.com/sirupsen/logrus"
)

var trimStrings []string

var matchingFuncNames = [...]string{
	"http.HandlerFunc.ServeHTTP",
	"cmd.serverMain",
	"cmd.StartGateway",
	// add more here ..
}

// sink: logger output interface
var (
	sink loggerSink = nil
)

// EnableQuiet - turns quiet option on.
func EnableQuiet() {
}

// EnableJSON - outputs logs in json format.
func EnableJSON() {
	logrus.SetFormatter(new(logrus.JSONFormatter))
}

// Set log file for as output
// Empty string or '-' symbol will redirect output to stdout
func SetOutput(filename string) {
	var newSink loggerSink
	if filename == "" || filename == "-" {
		newSink, _ = getStdoutSink()

	} else {
		var err error
		newSink, err = getFileSink(filename)
		if err != nil {
			logrus.Fatalf("Can not open new log file %s", filename)
		}
	}

	logrus.SetOutput(newSink)

	sink.Close()
	sink = newSink
}

// Set verbosity level
// 0 - Panic, 1 - Fatal, 2 - Error, 3 - Warning, 4 - Info, 5 - Debug
// Or use embedded logrus constants from logrus.PanicLevel to logrus.DebugLevel.
func SetLevel(level logrus.Level) {
	logrus.SetLevel(level)
}

// Init sets the trimStrings to possible GOPATHs
// and GOROOT directories. Also append github.com/minio/minio
// This is done to clean up the filename, when stack trace is
// displayed when an error happens.
func Init(goPath string) {
	var goPathList []string
	var defaultgoPathList []string
	// Add all possible GOPATH paths into trimStrings
	// Split GOPATH depending on the OS type
	if runtime.GOOS == "windows" {
		goPathList = strings.Split(goPath, ";")
		defaultgoPathList = strings.Split(build.Default.GOPATH, ";")
	} else {
		// All other types of OSs
		goPathList = strings.Split(goPath, ":")
		defaultgoPathList = strings.Split(build.Default.GOPATH, ":")

	}

	// Add trim string "{GOROOT}/src/" into trimStrings
	trimStrings = []string{filepath.Join(runtime.GOROOT(), "src") + string(filepath.Separator)}

	// Add all possible path from GOPATH=path1:path2...:pathN
	// as "{path#}/src/" into trimStrings
	for _, goPathString := range goPathList {
		trimStrings = append(trimStrings, filepath.Join(goPathString, "src")+string(filepath.Separator))
	}

	for _, defaultgoPathString := range defaultgoPathList {
		trimStrings = append(trimStrings, filepath.Join(defaultgoPathString, "src")+string(filepath.Separator))
	}

	// Add "github.com/minio/minio" as the last to cover
	// paths like "{GOROOT}/src/github.com/minio/minio"
	// and "{GOPATH}/src/github.com/minio/minio"
	trimStrings = append(trimStrings, filepath.Join("github.com", "minio", "minio")+string(filepath.Separator))

	if sink == nil {
		sink, _ = getStdoutSink()
		logrus.SetOutput(sink)
	}
}

func trimTrace(f string) string {
	for _, trimString := range trimStrings {
		f = strings.TrimPrefix(filepath.ToSlash(f), filepath.ToSlash(trimString))
	}
	return filepath.FromSlash(f)
}

// getTrace method - creates and returns stack trace
func getTrace(traceLevel int) []string {
	var trace []string
	pc, file, lineNumber, ok := runtime.Caller(traceLevel)

	for ok {
		// Clean up the common prefixes
		file = trimTrace(file)
		// Get the function name
		_, funcName := filepath.Split(runtime.FuncForPC(pc).Name())
		// Skip duplicate traces that start with file name, "<autogenerated>"
		// and also skip traces with function name that starts with "runtime."
		if !strings.HasPrefix(file, "<autogenerated>") &&
			!strings.HasPrefix(funcName, "runtime.") {
			// Form and append a line of stack trace into a
			// collection, 'trace', to build full stack trace
			trace = append(trace, fmt.Sprintf("%v:%v:%v()", file, lineNumber, funcName))

			// Ignore trace logs beyond the following conditions
			for _, name := range matchingFuncNames {
				if funcName == name {
					return trace
				}
			}
		}
		traceLevel++
		// Read stack trace information from PC
		pc, file, lineNumber, ok = runtime.Caller(traceLevel)
	}
	return trace
}

// Reopen : This routine will reopen output sink if applicable. For use with external programs for log rotation.
func Reopen() error {
	return sink.Reopen()
}

func prepareEntry(ctx context.Context) *logrus.Entry {
	req := GetReqInfo(ctx)

	if req == nil {
		req = &ReqInfo{API: "SYSTEM"}
	}

	API := "SYSTEM"
	if req.API != "" {
		API = req.API
	}

	tags := make(map[string]string)
	for _, entry := range req.GetTags() {
		tags[entry.Key] = entry.Val
	}

	// Get full stack trace
	trace := getTrace(2)

	stdLog := logrus.StandardLogger()
	entry := stdLog.WithField("api", API)

	if req.RemoteHost != "" {
		entry = entry.WithField("remotehost", req.RemoteHost)
	}

	if req.RequestID != "" {
		entry = entry.WithField("requestID", req.RequestID)
	}

	if req.UserAgent != "" {
		entry = entry.WithField("userAgent", req.UserAgent)
	}

	if req.BucketName != "" {
		entry = entry.WithField("bucket", req.BucketName)
	}

	if req.ObjectName != "" {
		entry = entry.WithField("object", req.ObjectName)
	}

	// Add trace log only for debug level
	if stdLog.Level == logrus.DebugLevel {
		if len(trace) > 0{
			entry = entry.WithField("trace",  strings.Join(trace, "\n"))
		}
	}

	if len(tags) > 0 {
		entry = entry.WithField("tags", fmt.Sprint(tags))
	}

	return entry
}

// LogIf :
func LogIf(ctx context.Context, err error) {
	if err == nil {
		return
	}

	entry := prepareEntry(ctx)
	entry.Error(err.Error())
}

// CriticalIf :
// Like LogIf with exit
// It'll be called for fatal error conditions during run-time
func CriticalIf(ctx context.Context, err error) {
	if err != nil {
		entry := prepareEntry(ctx)
		entry.Fatal(err.Error())
	}
}

// FatalIf :
// Just fatal error message, no stack trace
// It'll be called for input validation failures
func FatalIf(err error, msg string, data ...interface{}) {
	if err != nil {
		if msg != "" {
			logrus.Fatalf(msg, data...)
		} else {
			logrus.Fatal(err.Error())
		}
	}
}

// Info :
func Info(msg string, data ...interface{}) {
	logrus.Infof(msg, data...)
}

// StartupMessage :
func StartupMessage(msg string, data ...interface{}) {
	c.Printf( msg+"\n", data...)
}
