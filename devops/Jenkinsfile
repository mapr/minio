@Library("jenkins-shared-library")_

env.MAVEN_CENTRAL="${MAVEN_CENTRAL_COMMON}"
env.MAPR_CENTRAL="${MAPR_CENTRAL_COMMON}"
env.MAPR_RELEASES_REPO="${MAPR_RELEASES_REPO_COMMON}"
env.MAPR_SNAPSHOTS_REPO="${MAPR_SNAPSHOTS_REPO_COMMON}"
env.MAPR_MAVEN_REPO="${MAPR_SNAPSHOTS_REPO_COMMON}"

ARTIFACTORY_SERVER=''
env.REPOSITORY_NAME=''
env.GIT_REPO_URL=''
env.GIT_SHORT_COMMIT_SHA=''
env.CURRENT_BUILD_TAG=''
env.BUILD_BY_TAG=false

env.ARTIFACTORY_PATH_RPM=''
env.ARTIFACTORY_PATH_DEB=''
env.ID=''
env.MAKEFILE_ARGS=''
env.PROJECT=''
env.COMPONENT_VERSION=''

MAKEFILE_ARG_BRANCH_NAME = ""

pipeline {
  agent none
  triggers {
    pollSCM 'H/5 * * * *'
  }
  options {
    skipDefaultCheckout()
    disableConcurrentBuilds()
    timestamps()
  }
  parameters {
    choice(name: 'BUILD_TYPE', choices: ['Dev','EBF','Release'], description: 'default - Dev. EBF and Release args you can use only in release branches')
    string(name: 'MAKEFILE_ENV_VARS', defaultValue: '', description: 'Variables you can pass to makefile (command will be: make {THIS VAR} {project-name}). Please DO NOT put component_branch_name')
  }
  stages {
    stage("Setup settings and variables") {
      agent {label "redhat8"}
      steps {
        script {
          ARTIFACTORY_SERVER = Artifactory.server 'artifactory.devops.lab'
          //MAKEFILE_ARG_BRANCH_NAME will use for makefile only for release/EBF branches
          initVariables(params.BUILD_TYPE, MAKEFILE_ARG_BRANCH_NAME)
        }
      }
    }

    stage ("Main CI process") {
      parallel {
        stage("Ubuntu build") {
          agent {label "ubuntu"}
          stages {
            stage("Checkout") {
              steps {
                script {
                  checkout([$class: 'GitSCM', branches: [[name: "*/${env.BRANCH_NAME}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'mapr-github', url: 'https://github.com/mapr/private-mc']]])
                  checkout scm
                }
              }
            }

            stage("Build") {
              steps {
                script {
                  configFileProvider([configFile(fileId: 'maven_settings', variable: 'mvn_settings')]) {
                    sh "cat ${env.mvn_settings} > settings.xml"
                  }
                  docker.image("maprtech/ubuntu16-java11-gcc7").inside (
                  "-e MAPR_MIRROR=${MAPR_MIRROR} \
                  -e MAPR_CENTRAL=${MAPR_CENTRAL} \
                  -e MAVEN_CENTRAL=${MAVEN_CENTRAL} \
                  -e MAPR_MAVEN_REPO=${MAPR_MAVEN_REPO} \
                  -e BUILD_NUMBER=${ID}.${BUILD_NUMBER} \
                  -e MAPR_RELEASES_REPO=${MAPR_RELEASES_REPO} \
                  -e MAPR_SNAPSHOTS_REPO=${MAPR_SNAPSHOTS_REPO} \
                  -e GOROOT=${WORKSPACE}/go \
                  -v /root/.m2:/root/.m2:rw \
                  -v /root/yum-proxy.conf:/etc/yum.conf:ro \
                  -v /etc/hosts:/etc/hosts:ro \
                  -v /root/apt-proxy.conf:/etc/apt/apt.conf.d/proxy.conf:ro \
                  -v /root/.gradle/gradle.properties:/root/.gradle/gradle.properties:ro \
                  -v /etc/profile.d/proxy.sh:/etc/profile.d/proxy.sh:ro \
                  -v /etc/localtime:/etc/localtime:ro \
                  -v /root/.ssh:/root/.ssh:rw \
                  -v ${WORKSPACE}/settings.xml:/root/.m2/settings.xml:ro") {
                    sh """
                      wget https://golang.org/dl/go1.16.2.linux-amd64.tar.gz  > /dev/null 2>&1 ; \
                      tar zxf go1.16.2.linux-amd64.tar.gz ; \
                      echo \"deb http://dfaf.mip.storage.hpecorp.net/artifactory/prestage/releases-dev/v6.1.0/ubuntu binary trusty\" >> /etc/apt/sources.list ; \
                      apt-get update ; \
                      apt-get -y --allow-unauthenticated install mapr-librdkafka ; \
                      apt-get -y --allow-unauthenticated install mapr-client ; \
                      export PATH=\$GOROOT/bin/:\$PATH ; \
                      rm -rf ${env.PROJECT}; git clone git@github.com:mapr/private-pkg.git ${env.PROJECT}; \
                      cd ${env.PROJECT}; \
                      git checkout MEP-7.0.0 ; \
                      git config --global url."git@github.com:".insteadOf "https://github.com/" ; \
                      make mapr-objectstore-gateway-${COMPONENT_VERSION} TIMESTAMP=${ID} ${MAKEFILE_ARGS} ; \
                    """
                  }
                }
              }
            }

            stage("Upload to Artifactory") {
              steps{
                script {
                  from = "${WORKSPACE}/${env.PROJECT}/dist/*"
                  to = "${env.ARTIFACTORY_PATH_DEB}"
                  props = "deb.distribution=binary;deb.component=trusty;deb.architecture=all;release=${params.BUILD_TYPE}"
                  artifactory.uploadArtifactsAndBuildInfo(ARTIFACTORY_SERVER, from, to, props)
                }
              }
            }
          }
        }

        stage("Redhat build") {
          agent { label "redhat8" }
          stages {
            stage("Checkout") {
              steps {
                script {
                  checkout([$class: 'GitSCM', branches: [[name: "*/${env.BRANCH_NAME}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'mapr-github', url: 'https://github.com/mapr/private-mc']]])
                  checkout scm
                }
              }
            }

            stage("Build") {
              steps {
                script {
                  configFileProvider([configFile(fileId: 'maven_settings', variable: 'mvn_settings')]) {
                    sh "cat ${env.mvn_settings} > settings.xml"
                  }
                  withCredentials([usernamePassword(credentialsId: 'artifactory_user_pass', passwordVariable: 'pass', usernameVariable: 'user')]) {
                    docker.image("maprtech/centos8-java11-gcc8").inside (
                    "-e MAPR_MIRROR=${MAPR_MIRROR} \
                    -e MAPR_CENTRAL=${MAPR_CENTRAL} \
                    -e MAVEN_CENTRAL=${MAVEN_CENTRAL} \
                    -e MAPR_MAVEN_REPO=${env.MAPR_MAVEN_REPO} \
                    -e BUILD_NUMBER=${ID}.${BUILD_NUMBER} \
                    -e MAPR_RELEASES_REPO=${MAPR_RELEASES_REPO} \
                    -e MAPR_SNAPSHOTS_REPO=${MAPR_SNAPSHOTS_REPO} \
                    -e GOROOT=${WORKSPACE}/go \
                    -v /root/.m2:/root/.m2:rw \
                    -v /root/yum-proxy.conf:/etc/yum.conf:ro \
                    -v /etc/hosts:/etc/hosts:ro \
                    -v /root/apt-proxy.conf:/etc/apt/apt.conf.d/proxy.conf:ro \
                    -v /root/.gradle/gradle.properties:/root/.gradle/gradle.properties:ro \
                    -v /etc/profile.d/proxy.sh:/etc/profile.d/proxy.sh:ro \
                    -v /etc/localtime:/etc/localtime:ro \
                    -v /root/.ssh:/root/.ssh:rw \
                    -v ${WORKSPACE}/settings.xml:/root/.m2/settings.xml:ro") {
                      sh """
                        wget https://golang.org/dl/go1.16.2.linux-amd64.tar.gz 1>&/dev/null ; \
                        tar zxf go1.16.2.linux-amd64.tar.gz ; \
                        echo -e [mapr-core] > /etc/yum.repos.d/mapr-core.repo ; \
                        echo -e name=mapr-core >> /etc/yum.repos.d/mapr-core.repo ; \
                        echo -e baseurl=http://dfaf.mip.storage.hpecorp.net/artifactory/prestage/releases-dev/v6.1.0/redhat >> /etc/yum.repos.d/mapr-core.repo ; \
                        echo -e enabled=1 >> /etc/yum.repos.d/mapr-core.repo ; \
                        echo -e gpgcheck=0 >> /etc/yum.repos.d/mapr-core.repo ; \
                        export PATH=\$GOROOT/bin/:\$PATH ;\
                        yum clean all ; \
                        yum install -y mapr-librdkafka ; \
                        yum install -y mapr-client ; \
                        yum install -y compat-openssl10 ; \
                        rm -rf ${env.PROJECT}; git clone git@github.com:mapr/private-pkg.git ${env.PROJECT}; \
                        cd ${env.PROJECT}; \
                        git checkout MEP-7.0.0 ; \
                        git config --global url."git@github.com:".insteadOf "https://github.com/" ; \
                        make mapr-objectstore-gateway-${COMPONENT_VERSION} TIMESTAMP=${ID} ${MAKEFILE_ARGS} ; \
                      """
                    }
                    //export PATH=~/opensource/go/bin/:${ANT_HOME}/bin:${JAVA_HOME}/bin:${MAVEN_HOME}/bin:\$PATH ;\
                  }
                }
              }
            }

            stage("RPM Sign") {
              steps {
                configFileProvider([configFile(fileId: 'rpmSignSh', variable: 'rpmSignSh')]) {
                  sh """
                  cat ${env.rpmSignSh} > rpm_sign.sh
                  chmod 765 rpm_sign.sh
                  ./rpm_sign.sh ${env.PROJECT}/dist
                  """
                }
              }
            }

            stage("Upload to Artifactory") {
              steps{
                script {
                  from = "${WORKSPACE}/${env.PROJECT}/dist/*"
                  to = "${ARTIFACTORY_PATH_RPM}"
                  props = "release=${params.BUILD_TYPE}"
                  artifactory.uploadArtifactsAndBuildInfo(ARTIFACTORY_SERVER, from, to, props)
                }
              }
            }

            stage("Whitesource scan") {
              steps {
                script {
                  withCredentials([string(credentialsId: 'wsApiKey', variable: 'wsApiKey'), string(credentialsId: 'wsUserKey', variable: 'wsUserKey')]) {
                    //Launch container with WS scan. After scan report will upload to WS site
                    docker.image("docker.artifactory/whitesource:0.0.1").inside (
                      "-e MAPR_MIRROR=${MAPR_MIRROR} \
                      -e MAPR_CENTRAL=${MAPR_CENTRAL} \
                      -e MAVEN_CENTRAL=${MAVEN_CENTRAL} \
                      -e MAPR_MAVEN_REPO=${MAPR_MAVEN_REPO} \
                      -e MAPR_RELEASES_REPO=${MAPR_RELEASES_REPO} \
                      -e MAPR_SNAPSHOTS_REPO=${MAPR_SNAPSHOTS_REPO} \
                      -v /root/yum-proxy.conf:/etc/yum.conf:ro \
                      -v /etc/hosts:/etc/hosts:ro \
                      -v /root/apt-proxy.conf:/etc/apt/apt.conf.d/proxy.conf:ro \
                      -v /root/.gradle/gradle.properties:/root/.gradle/gradle.properties:ro \
                      -v /etc/profile.d/proxy.sh:/etc/profile.d/proxy.sh:ro \
                      -v /root/.ssh:/root/.ssh:rw \
                      -v ${WORKSPACE}/settings.xml:/root/.m2/settings.xml:ro \
                      -v /root/.m2/repository:/root/.m2/repository:rw") {
                        sh """
                        cd devops/whitesource/ ; \
                        curl -LJO https://github.com/whitesource/unified-agent-distribution/releases/latest/download/wss-unified-agent.jar ; \
                        java -jar wss-unified-agent.jar -project ${env.PROJECT} -product ${env.PROJECT} -userKey $wsUserKey -apiKey $wsApiKey -c wss-unified-agent.config -d ../../ ; \
                        """
                      }
                   }
                }
              }
            }

            stage("Push Whitesource reports") {
              steps {
                script {
                  withCredentials([string(credentialsId: 'wsApiKey', variable: 'wsApiKey'), string(credentialsId: 'wsUserKey', variable: 'wsUserKey')]) {
                    catchError {
                      /*Get token of product. We have to communicate with WS API only using 64-digits project's token.
                        We are sending request to API and get ALL "project+token" pairs. Then parse this information and find token for current project*/
                        productToken = ws.getWSProductToken(PROJECT)

                        //Get reports (Excel and json) from WS site and save these reports to files. Once for each format
                        ws.getWSReports(productToken)

                        //Move latest reports to the "old" folder in Artifactory
                        ws.moveOldWsReports(ARTIFACTORY_SERVER)

                        //Upload reports (Excel and json) to the Artifactory (to the latest folder)
                        ws.uploadToArtifactory(ARTIFACTORY_SERVER)
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        postActions.failure()
      }
    }
    fixed {
      script {
        postActions.fixed()
      }
    }
    aborted {
      script {
        postActions.aborted()
      }
    }
    always {
      script {
        postActions.always()
      }
    }
  }
}
